---
description: rules to understand how to engineer a great system to prevent db duplicaiton
globs: 
---
We use pglite to store stuff in db

and drizzle

import { embed } from 'ai';
import { openai } from '@ai-sdk/openai';

// 'embedding' is a single embedding object (number[])
const { embedding } = await embed({
  model: openai.embedding('text-embedding-3-small'),
  value: 'sunny day at the beach',
});


pg vector:
Open-source vector similarity search for Postgres.

Store your vectors with the rest of your data. Supports:

exact and approximate nearest neighbor search
single-precision, half-precision, binary, and sparse vectors
L2 distance, inner product, cosine distance, L1 distance, Hamming distance, and Jaccard distance
pgvector is included in the main PGlite package.

js
import { vector } from '@electric-sql/pglite/vector';
const pg = new PGlite({
  extensions: { vector }
});

ai vercel embeddings.
0xHypr hello

Below is an explanation of how the duplicate-check mechanism works and a generic version of the implementation without relying on an agent identifier.

### Explanation

The duplicate check function determines if a new classification item is a duplicate of any existing items by using text embeddings and cosine similarity. Here's how it works:

1. **Normalization of Text:**  
   The function combines and normalizes the item's title and vital information (by converting to lowercase and trimming any extra spaces). This produces a consistent text representation.

2. **Embedding Generation:**  
   It then generates an embedding vector for the normalized text using a text embedding model (in this example, the `"text-embedding-3-small"` model).

3. **Comparison with Existing Items:**  
   For each existing item, the function computes a similar normalized text and its embedding. After both embeddings are ready, it calculates the cosine similarity between the new item's embedding and each existing item's embedding.

4. **Threshold Check:**  
   If the similarity score exceeds a predefined threshold (e.g., 0.8), the function considers the new item as a duplicate and returns `true`. Otherwise, it continues checking until all items have been compared, finally returning `false` if no duplicate is found.

### Generic Implementation

Below is the generic version of the duplicate check function in JavaScript. It does not depend on any agent identifier and assumes that each item contains a `title` and `vitalInformation`.

```javascript:src/utils/duplicateCheck.js
import { createOpenAI } from '@ai-sdk/openai';
import { embed, cosineSimilarity } from 'ai';
import { getApiKey } from '@/stores/api-key-store'; // Adjust the import based on your project structure

/**
 * Normalize text by combining title and vital information.
 *
 * @param {string} title - The title of the classification item.
 * @param {string} [vitalInfo=''] - The vital information associated with the item.
 * @returns {string} The normalized text.
 */
function getNormalizedText(title, vitalInfo = '') {
  return `${title.toLowerCase().trim()} ${vitalInfo.toLowerCase().trim()}`;
}

/**
 * Checks if a new classification item is a duplicate among existing items.
 *
 * @param {Object} newItem - The new item with properties { title, vitalInformation }.
 * @param {Array<Object>} existingItems - Array of existing items, each containing { title, vitalInformation }.
 * @returns {Promise<boolean>} - True if a duplicate is detected, false otherwise.
 */
export async function isDuplicate(newItem, existingItems) {
  try {
    // Initialize the OpenAI API with the provided API key
    const openai = createOpenAI({ apiKey: getApiKey() });
    
    // Generate the normalized text and its embedding for the new item
    const newText = getNormalizedText(newItem.title, newItem.vitalInformation);
    const { embedding: newEmbedding } = await embed({
      model: openai.embedding('text-embedding-3-small'),
      value: newText,
    });
    
    // Compare the new item's embedding with that of each existing item
    for (const item of existingItems) {
      const oldText = getNormalizedText(item.title, item.vitalInformation);
      const { embedding: oldEmbedding } = await embed({
        model: openai.embedding('text-embedding-3-small'),
        value: oldText,
      });
      const similarity = cosineSimilarity(newEmbedding, oldEmbedding);
      
      // If similarity is above the threshold, consider it as a duplicate
      if (similarity > 0.8) {
        return true;
      }
    }
    
    // If no duplicates are found, return false
    return false;
  } catch (error) {
    console.error('Error during duplicate check:', error);
    return false;
  }
}
```

This generic implementation removes the dependency on an agent identifier by simply iterating over all existing items and comparing their corresponding embeddings. It allows you to explain how duplicate detection works in your new coding agent by highlighting the normalization, embedding, and similarity comparison steps.
